<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>133, 17</value>
  </metadata>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SABP6oQAWviXAA+rIQAHfQ0AL68/AB+kPwAyzWUANZY4AEXYbwAUiiEAN8NSABdzFwAjeSMABmgGAF6Y
        XgA3ejcADIQZADHOSQBt/6QAK8dZADypRgBfjV8AT45PABudKQAaqSYAHbg7AGL+kQAPmhUAIsBHAErj
        cAAGiwgABqQOACOzNQAAgQAAK7pBAG+YbwAygTIAAG0AABmUJAA911sAJIUmAEXgZwBU7n8AH503ACSq
        NwAomjUAQtBsABGSHwADlggAP9l1AEKLQgAMhw0AEZknACi4UwAGggYAHqw/AEvheAAJqxQAHoggACys
        RgAFcwUAR+SAABSkIAA3x14AH68vADHDTQAYtDUAILtCADSLNgAvuk8AMKY9AFzzkQAvyGIAM8FXAFTt
        hwAtwUIAKLNGAGH7mQAYpzEAcf+rAFf0gwAAZgAAPdNgABCFEgAVjyYABXsHABV5FQBf+I4AC20LADW8
        TQAHkgsADaobACexQABR6XoAAZEBABOfGwAVrysAH58yACOkNgApuUcADXwNAGuWawAYmDMAOM1nABSe
        KAAcrioAEXURAEjbcwA902wAE7EnAAKGBQAHiQ8AY5VjAFyMXAAxtUwAVY9VABeVKQA2y1EARd55ABCd
        IQAuw1sALJczACG2MQBY74QACpMTAAyOFwBj/5wAYvuUAEvlgAAuyl8AF7ExACrEVQAfpDIAJsBMADDA
        SQBq/6AAWPGNAAByAAAAfAAAAIYAAEDdeQAIhAoADIcUAAylGgA0z2kATYpNACKqPQBylnIAHKYpAFn2
        kwBV7IQATedzADrVVgAwykcACY4OACnEUQActjUAI68xACW5NgADbgMAN8lhAA6WFABbkFsAH6c/AACY
        AgALmhYACqcVAFGLUQAVlCUAMs5NABi1MQBnmGcAGZAkAAJ2AwAEiQQAQ91mAC7FYAAzvVAAKrtSADG7
        TABc+ZQAXPWPAAV9CgBI3nYAD6gfAB63PgArtkcAdJp0AGWSZQBcmlwASotKADHMYgACawIAApMEAEng
        cQBC23YAPNl2ADWMOQBp/54AYv2UAF35lwBf+ZMAUeyHACmQMAAAYgAAXfaRAABpAABa848ADW4NAHab
        dgB0mHQAEHIQABOcJgBNjU0AHKooAB6nKwAeuj4ABGgEAFbvggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgMDGWAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANPmYWHESeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRGNhYWHE
        xH2KAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4CARWFhYWHExMRhGkgAAAAAAAAAAAAAAAAAAAAAAGEHhWdm
        enphYWHExHphxH36AAAAAAAAAAAAAAAAAACTk/3eaHd6k3phYcTEk2FhxMSYAAAAAAAAAAAAAAAAWF5D
        qKiovJOTk3phYcSTemFhxAYAAAAAAAAAAAAAAHiSBxgrK+m75tOTk3phxJOTemFhGgAAAAAAAAAAAAAA
        GP1oVGIlLv7EYXqTk3rE05N6emEMAAAAAAAAAAAAAACNqJ2pbHrmk2FhxP7EYcTTk5N6eokAAAAAAAAA
        AAAAAFy1m0uTI0QYYWFhxMT+/pBmynp6YQAAAAAAAAAAAADgK2xgeg+0J/l6YWFhxMQKUCoQjBVhAAAA
        AAAAAAAAAJUIS3qhhYXBuXp6YWFhxP4SKtfVUOIAAAAAAAAAAAAAAGEjf/n93qpRk5N6YWFh/lAqLvoA
        AAAAAAAAAAAAAACVDyfKqaqoK0WTk5N6YWHExMcAAOCKlcf6+gAAAAAAAJjBwfkVpm2bH5OTk5N6YcT+
        ADBhYWFhxMT+fQAAAAAAV0Gq+Z3pmwhFk5OTk3p6Yf406Vh6YWFhxMTEmAAAAABppiv5pQjZo+tPmo6T
        YXph/jURfmF6YWFhYcR9AAAAAJ7pm6mkN6PZCAgIbNklR8T+1+m7epN6emFhYcTHAAAAUtmkpDxR1i27
        uyViKxJhYdsR6KVHepN6emFhYRMAAABrBDejo9mQL7fN21B+RaFhs2KbpQh6k5OTemFhYZYAAAA5KRVq
        K5EvUJdso2xs2VPEpaUlo46Tk5N6YWFhMAAAAAAAAAAA4OIJft8vK9+e4ABku7tsoJN/hLm5uT17AAAA
        AAAAAAAAAAAAAAAAAAAAAIdsCKQ3N6RPTr3OjooAAAAAAAAAAAAAAAAAAAAAAAAALKPZo3xPvNQbvh9X
        AAAAAAAAAAAAAAAAAAAAAAAAAADQu+uku7zUTM4NTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvdKR1Hkxw
        udEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOIOnur6lrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////D////wH///4A
        f//8AA//+AAD//AAAf/gAAH/wAAB/8AAAf/AAAH/wAAB/4AAAf+AAAH/wAAH/4AAGB+AACAPgAAAB4AA
        AAeAAAADgAAAA4AAAAHAAAAB/gBAAf//wAH//8AD///AB///4A///+A///////////8=
</value>
  </data>
</root>